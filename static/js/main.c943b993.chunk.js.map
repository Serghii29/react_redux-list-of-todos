{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils/PreparedTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterTodos","field","isVisibleTodo","preparedQuery","toLocaleLowerCase","trim","title","includes","completed","preparedTodos","length","className","map","isSelected","id","classNames","onClick","todoActions","addTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","filterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","users","setUser","iscurrentTodoLoading","setIscurrentTodoLoading","fetchUser","a","userId","user","console","error","useEffect","currentTodoActions","href","email","name","App","isTodoLoading","setIsTodoLoading","fetchTodos","data","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c943b993.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type Action = {\n  type: 'filter/FILTER_QUERY' | 'filter/FILTER_STATUS';\n  payload: string;\n};\n\nconst setFilterQuery = (query: string): Action => ({\n  type: 'filter/FILTER_QUERY',\n  payload: query,\n});\n\nconst setFilterStatus = (status: string): Action => ({\n  type: 'filter/FILTER_STATUS',\n  payload: status,\n});\n\nexport const actions = { setFilterQuery, setFilterStatus };\n\nconst filterReducer = (\n  state = { query: '', status: 'all' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/FILTER_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/FILTER_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype State = Todo[];\ntype SetTodoAction = { type: 'todos/SET', payload: Todo[] };\n\nexport const setTodo = (todos: Todo[]): SetTodoAction => (\n  {\n    type: 'todos/SET',\n    payload: todos,\n  }\n);\n\nconst todosReducer = (state: State = [], action: SetTodoAction): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { preparedTodos } from '../../utils/PreparedTodos';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n\n  const addTodo = (todo: Todo) => dispatch(todoActions.setTodo(todo));\n\n  const filterTodos = preparedTodos(filter.query, todos, filter.status);\n\n  return (\n    <>\n      {filterTodos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filterTodos.map(todo => {\n                const isSelected = todo.id === currentTodo?.id;\n\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    key={todo.id}\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames({\n                        'has-text-success': todo.completed,\n                        'has-text-danger': !todo.completed,\n                      })}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => addTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames({\n                            'far fa-eye': !isSelected,\n                            'far fa-eye-slash': isSelected,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function preparedTodos(\n  query: string,\n  todos: Todo[],\n  field: string,\n) {\n  let isVisibleTodo = [...todos];\n  const preparedQuery = query.toLocaleLowerCase().trim();\n\n  if (preparedQuery) {\n    isVisibleTodo = isVisibleTodo.filter(todo => {\n      return todo\n        .title\n        .toLocaleLowerCase()\n        .includes(preparedQuery);\n    });\n  }\n\n  switch (field) {\n    case ('active'):\n      isVisibleTodo = isVisibleTodo.filter(todo => !todo.completed);\n      break;\n\n    case ('completed'):\n      isVisibleTodo = isVisibleTodo.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return isVisibleTodo;\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={({ target }) => (\n              dispatch(filterActions.setFilterStatus(target.value))\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={({ target }) => {\n            dispatch(filterActions.setFilterQuery(target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setFilterQuery(''))}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [users, setUser] = useState<User | null>(null);\n  const [iscurrentTodoLoading, setIscurrentTodoLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const clear = () => dispatch(currentTodoActions.removeTodo());\n\n  const fetchUser = async () => {\n    try {\n      if (currentTodo?.userId) {\n        setIscurrentTodoLoading(true);\n        const user = await getUser(currentTodo?.userId);\n\n        setUser(user);\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error when receiving user:', error);\n    } finally {\n      setIscurrentTodoLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {iscurrentTodoLoading\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {' '}\n                {currentTodo?.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={clear}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n                <a href={`mailto:${users?.email}`}>{users?.name}</a>\n              </p>\n            </div>\n          </div>\n\n        )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { setTodo } from './features/todos';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [isTodoLoading, setIsTodoLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const fetchTodos = async () => {\n    try {\n      setIsTodoLoading(true);\n      const data = await getTodos();\n\n      dispatch(setTodo(data));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error when receiving a list of tasks:', error);\n    } finally {\n      setIsTodoLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isTodoLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}